Проект "Фермерское приложение"
Описание проекта
Фермерское приложение разработано для управления фермерскими операциями, такими как управление сотрудниками, запись урожая и оценка производительности.
Приложение предоставляет REST API для взаимодействия с клиентскими приложениями.

Использованные технологии
Java 17
Spring Boot 2.6.2
Spring Data JPA
Spring Security
PostgreSQL
Lombok
Spring Boot Mail
Spring Scheduling
Maven

Компоненты проекта
Модели (model)
Employee: Модель для представления сотрудника.
HarvestNorm: Модель для установки нормы сбора урожая.
HarvestRecord: Модель для записи о сборе урожая.
PerformanceReview: Модель для оценки производительности сотрудника.
Product: Модель для представления продукта.
StatisticItem: Модель для элемента статистики.
StatisticsResponse: Модель для ответа статистики.

Репозитории (repository)
EmployeeRepository: Репозиторий для работы с сотрудниками.
HarvestRecordRepository: Репозиторий для работы с записями о сборе урожая.
PerformanceReviewRepository: Репозиторий для работы с оценками производительности.
ProductRepository: Репозиторий для работы с продуктами.

Сервисы (service)
EmailService: Сервис для отправки электронных писем.
EmployeeService: Сервис для работы с сотрудниками.
HarvestNormService: Сервис для управления нормами сбора урожая.
HarvestProgressService: Сервис для отслеживания прогресса сбора урожая.
HarvestRecordService: Сервис для работы с записями о сборе урожая.
PerformanceReviewService: Сервис для работы с оценками производительности.
ProductService: Сервис для работы с продуктами.
StatisticsService: Сервис для получения статистики по собранному урожаю.

Контроллеры (controller)
EmployeeController: Контроллер для управления сотрудниками.
HarvestNormController: Контроллер для управления нормами сбора урожая.
HarvestProgressController: Контроллер для управления прогрессом сбора урожая.
HarvestRecordController: Контроллер для работы с записями о сборе урожая.
PerformanceReviewController: Контроллер для работы с оценками производительности.
ProductController: Контроллер для работы с продуктами.
StatisticsController: Контроллер для получения статистики.

Задание (tasks)
ScheduledTasks: Класс для выполнения задания отправки ежедневного отчета на почту.

Примеры REST-запросов и ответов
Примеры REST-запросов и ответов представлены в контроллерах приложения. Например:

Создание нового сотрудника:
POST запрос на /employees/add с телом запроса, содержащим информацию о сотруднике.
Получение списка всех сотрудников:
GET запрос на /employees/all.

Запуск проекта
Установите необходимые зависимости, указанные в файле pom.xml.
Настройте конфигурацию базы данных в файле application.properties.
Запустите проект с помощью команды mvn spring-boot:run.

Получение списка всех продуктов:
Метод: GET
Путь: /products/all
Этот запрос получает список всех зарегистрированных продуктов.

Примеры Rest запросов:
Обновление информации о продукте:
Метод: PUT
Путь: /products/update
Тело запроса:
json
Copy code
{
    "id": 1,
    "name": "Яблоки",
    "unitOfMeasurement": "шт"
}

Регистрация нового продукта:
Метод: POST
Путь: /products/register
Тело запроса:
json
Copy code
{
    "name": "Яблоки",
    "unitOfMeasurement": "кг"
}

Получение списка всех активных сотрудников:
Метод: GET
Путь: /employees/active
Этот запрос получает список всех активных сотрудников.

Обновление информации о сотруднике:
Метод: PUT
Путь: /employees/update
Тело запроса:
json
Copy code
{
    "id": 2,
    "fullName": "Сидоров Петр Сергеевич",
    "email": "sidiriv@example.com",
    "active": true,
    "harvestNorm": 20.0
}

Презентация работы
Кроме того, подготовлено видео-презентация работы, в которой подробно рассмотрены основные возможности приложения,
показаны примеры использования. Посмотреть можно по ссылке: https://drive.google.com/drive/folders/1ln-avSJokAkphMxAIehhIzTLmsfTzzRl?usp=sharing